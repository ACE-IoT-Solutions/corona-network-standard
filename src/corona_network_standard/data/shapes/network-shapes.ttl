@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix net: <http://www.example.org/network-ontology#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#> .

# Shape for VLAN class
net:VLANShape
    a sh:NodeShape ;
    sh:targetClass net:VLAN ;
    sh:property [
        sh:path net:vlanId ;
        sh:datatype xsd:integer ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:name "VLAN ID" ;
        sh:description "The unique identifier for the VLAN." ;
    ] ;
    sh:property [
        sh:path net:vlanName ;
        sh:datatype xsd:string ;
        sh:maxCount 1 ; # Optional name
        sh:name "VLAN Name" ;
        sh:description "The descriptive name for the VLAN." ;
    ] ;
    sh:property [
        sh:path net:hasSubnet ;
        sh:nodeKind sh:IRI ;
        sh:class net:Subnet ; # Ensures the value is a Subnet instance
        sh:name "Has Subnet" ;
        sh:description "Relates a VLAN to the Subnets configured on it." ;
    ] .

# Shape for Subnet class
net:SubnetShape
    a sh:NodeShape ;
    sh:targetClass net:Subnet ;
    sh:property [
        sh:path net:subnetCidr ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:name "Subnet CIDR" ;
        sh:description "The CIDR notation for the subnet (e.g., '192.168.1.0/24')." ;
        # Consider adding sh:pattern for CIDR format validation
    ] .

# Shape for AddressAssignment class
net:AddressAssignmentShape
    a sh:NodeShape ;
    sh:targetClass net:AddressAssignment ;
    sh:property [
        sh:path net:ipValue ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:name "IP Value" ;
        sh:description "The literal IP address string." ;
        # Consider adding sh:pattern for IP address format validation
    ] ;
    sh:property [
        sh:path net:onSubnet ;
        sh:nodeKind sh:IRI ;
        sh:class net:Subnet ; # Ensures the value links to a Subnet instance
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:name "On Subnet" ;
        sh:description "Relates the address assignment to its Subnet." ;
    ] .

# Shape for Node class (superclass for Host, Router, Switch)
net:NodeShape
    a sh:NodeShape ;
    sh:targetClass net:Node ;
    sh:property [
        sh:path net:HWStatus ;
        sh:datatype xsd:string ; # Could be refined with sh:in if specific statuses exist
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:name "Hardware Status" ;
    ] ;
    sh:property [
        sh:path net:HasIFace ;
        sh:nodeKind sh:IRI ;
        sh:class net:Iface ; # Ensures the value is an Iface instance
        sh:name "Has Interface" ;
    ] ;
    sh:property [
        sh:path net:HasNeighbor ;
        sh:nodeKind sh:IRI ;
        sh:class net:Node ; # Ensures the value is a Node instance
        sh:name "Has Neighbor" ;
    ] .

# Shape for Iface (Interface) class
net:IfaceShape
    a sh:NodeShape ;
    sh:targetClass net:Iface ;
    sh:property [
        sh:path net:BelongsToNode ;
        sh:nodeKind sh:IRI ;
        sh:class net:Node ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:name "Belongs to Node" ;
    ] ;
    sh:property [
        sh:path net:HWStatus ;
        sh:datatype xsd:string ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:name "Hardware Status" ;
    ] ;
     sh:property [
        sh:path net:portMode ;
        sh:datatype xsd:string ; # Could be refined with sh:in
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:name "Port Mode" ;
    ] ;
    sh:property [
        sh:path net:hasAddressAssignment ;
        sh:nodeKind sh:IRI ;
        sh:class net:AddressAssignment ; # Ensures the value is an AddressAssignment instance
        sh:name "Has Address Assignment" ;
        sh:description "Links an Interface to its IP address assignments." ;
    ] ;
    sh:property [
        sh:path net:ConnectedToLink ;
        sh:nodeKind sh:IRI ;
        sh:class net:Link ;
        sh:maxCount 1 ;
        sh:name "Connected to Link" ;
    ] ;
    sh:property [
        sh:path net:accessVlan ;
        sh:nodeKind sh:IRI ; # Changed from datatype
        sh:class net:VLAN ;
        sh:maxCount 1 ; # Assuming an access port belongs to one VLAN
        sh:name "Access VLAN" ;
    ] ;
     sh:property [
        sh:path net:allowedVlan ;
        sh:nodeKind sh:IRI ; # Changed from datatype
        sh:class net:VLAN ;
        sh:name "Allowed VLAN" ; # For trunk ports
    ] .

# Shape for Link class
net:LinkShape
    a sh:NodeShape ;
    sh:targetClass net:Node ;
    sh:sparql [
        sh:message "If a Node ($this) HasIFace ?iface, then ?iface must have $this in its net:BelongsToNode property." ;
        sh:select """
            SELECT $this ?iface
            WHERE {
                $this net:HasIFace ?iface .
                FILTER NOT EXISTS {
                    ?iface net:BelongsToNode $this .
                }
            }
            """ ;
    ] .
